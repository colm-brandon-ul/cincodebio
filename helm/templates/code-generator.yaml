apiVersion: v1
kind: Service
metadata:
  labels:
    app: {{ .Values.codeGenerator.name}}
  name: {{ .Values.codeGenerator.name}}
spec:
  ports:
    - port: 80
      protocol: TCP
      targetPort: 80
  selector:
    app: {{ .Values.codeGenerator.name}}
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.codeGenerator.name}}
  labels:
    app: {{ .Values.codeGenerator.name}}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: {{ .Values.codeGenerator.name}}
  template:
    metadata:
      labels:
        app: {{ .Values.codeGenerator.name}}
    spec:
      # This will wait for the RabbitMQ service to be ready before starting the container
      # However it will soon be deprecated, so needs to be updated    
      initContainers:
      - name: wait-for-rabbitmq
        image: curlimages/curl:7.72.0
        command:
        - /bin/sh
        - -c
        - >
          until curl -s -u {{ .Values.rabbitmq.auth.username }}:{{ .Values.rabbitmq.auth.password }} http://{{ .Values.rabbitmq.nameOverride }}:15672/api/healthchecks/node; do
            echo "Waiting for RabbitMQ service to be ready...";
            sleep 2;
          done
      containers:
        - name: {{ .Values.codeGenerator.name}}
          image: {{ .Values.codeGenerator.image }}
          imagePullPolicy: Always
          ports:
            - containerPort: 80
          env:
          - name: RABBITMQ_USERNAME
            value: {{ .Values.rabbitmq.auth.username }}
          - name: RABBITMQ_PASSWORD
            value: {{ .Values.rabbitmq.auth.password }}
          - name: CODE_GENERATOR_EXCHANGE_NAME
            value: {{ .Values.codeGenerator.exchange_name }}
          - name: CODE_GENERATOR_ROUTING_KEY
            value: {{ .Values.codeGenerator.routing_key }}
          - name: CINCO_DE_BIO_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
        