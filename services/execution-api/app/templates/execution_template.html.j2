{# Template for providing updates of the workflow execution steps #}
<html>
    <head>
        <style>
            /* Color Palette:
                - Primary: #61dafb (used for primary elements)
                - Secondary: #282c34 (used for secondary elements)
                - Accent: #f8f8f8 (used for accent elements)
                - Text: #ffffff (used for text)
            */
        
            :root {
                --background: #ffffff;
                --modal-background-color: #f9f9f9;
                --modal-border-color: #ccc;
                --modal-border-radius: 8px;
                --clickable-modal-background-color: #f8f8f8;
                --clickable-text: #007bff;
                --text: #000000;
                --heading: #61dafb;
                --submit-button-color: #3498db;
                --submit-button-color-hover: #2186c4;
        
            }
            
            body {
                background-color: var(--background);
                color: var(--text);
                font-family: Arial, sans-serif;
            }
        
            nav {
                background-color: var(--modal-background-color);
                border: 1px solid var(--modal-border-color);
                border-radius: var(--modal-border-radius);
                padding: 10px;  
                display: flex;
                justify-content: flex-end; /* Modified: right-align the nav */
                align-items: center;
                margin-bottom: 1vh;
            }

            #cdbLogo {
                    height: 5vh;
                    margin-right: auto;
            }

            nav ul {
                list-style-type: none;
                margin: 0;
                padding: 0;
                display: flex;
            }

            nav ul li {
                margin-right: 20px;
            }

            nav ul li a {
                color: var(--text);
                text-decoration: none;
                transition: color 0.3s ease;
            }

            nav ul li a:hover {
                color: var(--heading);
            }

        
            h1 {
                color: var(--heading)
            }
        
            
            #wf-status{
                color: var(--text);
                background-color: var(--object-color);
                padding: 10px;
                margin-bottom: 10px;
                border-radius: 5px; 
            }
           
        
            .button:hover {
                background-color: #282c34;
            }
        
            .link {
                color: #61dafb;
                text-decoration: none;
            }
        
            a {
                color: var(--clickable-text);
                text-decoration: none;
                
            }
        
            .link:hover {
                text-decoration: underline;
            }
        
         
        
            #wf-state-container li {
                    background-color: var(--modal-background-color);
                    /* padding: 10px; */
                    margin-bottom: 10px;
                    border: 1px solid #ccc;
                    border-radius: 8px;
                    
            }

            #wf-state-container li.has-link {
            background-color: #007BFF; /* Adjust this color to your liking */
            }

            #wf-state-container li.has-link:hover {
                background-color: var(--submit-button-color-hover);
            }
        
            #wf-state-container li a {
                display: block;
                color: #ffffff;
                width: 100%;
            }
        
            #wf-state-container li a > span {
                color: #ffffff;
                padding: 10px;
                
            }
        
            #wf-state-container li > span {
                color: var(--text);
                padding: 10px;
                
            }
            
        
        </style>
        <script>

            // Declaration
            class Workflow {
            constructor(id,owner,status,state) {
                this.id = id;
                this.owner = owner;
                this.status = status;
                this.state = state;
            }
            }

            /*
            {'_id': '64c7a3a6923084b56dc97f9f', 
            'owner': 'public', 
            'status': 'completed', 
            'state': [
                {'id': '1f3f218c-f3f4-4dcc-a09c-369320a34566', 'workflow': '64c7a3a6923084b56dc97f9f', 'job_status': 'completed'}, 
                {'id': 'c4651190-865c-4961-81b7-2766a32db8d5', 'workflow': '64c7a3a6923084b56dc97f9f', 'job_status': 'completed'}]}
            */

            Workflow.fromJson = function(json) {
                // Need to figure out the solution for need to parse twice!
                var data = JSON.parse(JSON.parse(json)); // Parsing the json string.
                return new Workflow(data.id,data.owner,data.status,data.state);
            };
            
            var wf_state;

            var ws = new WebSocket('{{ws_address}}');
            // Send Echo to client every second to keep connection open
    
            function sendEcho() {
                // return new date and time
                let dateTime= new Date();
                // return the time
                let time = dateTime.toLocaleTimeString();
                console.log(time)
                ws.send('echo')
            }
    
            ws.onmessage = function(event) {
                var message = document.createElement('li')
                // var content = document.createTextNode(event.data)

                if (typeof wf_state !== 'undefined') {
                // the variable is defined
                    new_wf_state = Workflow.fromJson(event.data)
                    
                    // has the workflow status changed?
                    if (wf_state.status !== new_wf_state.status){
                        // Update Workflow State Display and update existing object
                        
                        
                        
                        existing_text_node = document.getElementById('wf-status')
                        const newNode = document.createTextNode(`Workflow; ${wf_state.id} is ${new_wf_state.status}`);
                        existing_text_node.replaceChild(newNode, existing_text_node.childNodes[0]);
                        wf_state.status = new_wf_state.status

                    }

                    // Check Job State
                    old_state_length = wf_state.state.length
                    new_wf_state.state.forEach(function (item, index) {
                        if (index >= old_state_length){
                            // A new state has been added
                            var message = document.createElement('li')
                            message.setAttribute("id",item.id);
                            console.log(item.job_status == 'awaiting_interaction')
                            var content
                            if (item.job_status == 'awaiting_interaction'){
                                // creates a clickable hyperlink and puts the job_status as the text inside a span
                                content = document.createElement('a')
                                content.setAttribute("href",item.url)
                                content_text = document.createTextNode(`${item.service_name} - ${item.job_status}`);
                                content.appendChild(content_text)
                            }
                            else{
                                // creates a span with the job_status as the text
                                content = document.createTextNode(`${item.service_name} - ${item.job_status}`)
                            }
                            
                            message.appendChild(content)
                            document.getElementById('wf-state-container').appendChild(message)
                        }
                        else {
                            if (item.job_status != wf_state.state[index].job_status){
                            existing_text_node = document.getElementById(item.id)
                            // console.log(wf_state.state[index])
                            // console.log(item.job_status + " " + wf_state.state[index].job_status)
                            // console.log(item.job_status != wf_state.state[index].job_status)
                            let newNode;
                            if (item.job_status == 'awaiting_interaction') {
                                newNode = document.createElement('a')
                                newNode.setAttribute("href",item.url)
                                content_text = document.createTextNode(`${item.service_name} - ${item.job_status}`);
                                newNode.appendChild(content_text)
                            }
                            else{
                                newNode = document.createTextNode(`${item.service_name} - ${item.job_status}`);
                            }

                            
                            existing_text_node.replaceChild(newNode, existing_text_node.childNodes[0]);
                        }
                    }
                    // console.log(item, index);
                    });
                    wf_state.state = new_wf_state.state
                }
                // the variable is undefined - therefore needs to be initialised
                else {
                    wf_state = Workflow.fromJson(event.data)
                    document.getElementById('wf-status').appendChild(document.createTextNode(`Workflow; ${wf_state.id} is ${wf_state.status}`))

                    wf_state.state.forEach(function (item, index) {
                        var message = document.createElement('li')
                        message.setAttribute("id",item.id);
                        var content;
                        if (item.job_status == 'awaiting_interaction') {
                            // creates a hyperlink and puts the job_status as the text inside a span
                            content = document.createElement('a');
                            var link = document.createElement('span');
                            content.setAttribute("href", item.url);
                            var content_text = document.createTextNode(`${item.service_name} - ${item.job_status}`);
                            link.appendChild(content_text);
                            content.appendChild(link)
                            
                             // Add a class to the li element
                             message.classList.add('has-link');;
                            
                        }
                        else{
                            content = document.createElement('span');
                            var content_text = document.createTextNode(`${item.service_name} - ${item.job_status}`);
                            content.appendChild(content_text);

                           
                        }

                        // var content = document.createTextNode(item.job_status)
                        message.appendChild(content)
                        document.getElementById('wf-state-container').appendChild(message)
                    });
                    
                    

                }
              
            };
            // Send Echo every second for Websocket to stay open
            setInterval(sendEcho,1000)
        </script>
        <title>
            CellMaps Execution Frontend
        </title>
    </head>
    <body>
        <nav>
            <!-- need to set a proper source URI for this -->
            <img id="cdbLogo" src="/{{ executionApiIngress }}/static/cdbLogo.png" alt="Image">
            <ul>
                <!-- URLs need to be set by the cluster ingress -->
                <li><a href="/{{ executionApiIngress }}/">Workflows</a></li>
                <li><a href="/{{ dataUploadIngress }}/">Data Upload</a></li>
                <li><a href="/{{ sibManagerIngress }}/">Manage Sibs</a></li>
            </ul>
        </nav>

        <div id="wf-status">

        </div>
        <ol id="wf-state-container">

        </ol>
    </body>


</html>
