{# Template for displaying all workflows to the user #}
<!DOCTYPE html>
<html>

<head>
    <title>Workflow List</title>
    <style>
        /* Add your CSS styles here */
        :root {
            --background: #ffffff;
            --modal-background-color: #f9f9f9;
            --modal-border-color: #ccc;
            --modal-border-radius: 8px;
            --clickable-modal-background-color: #f8f8f8;
            --clickable-text: #007bff;
            --text: #000000;
            --heading: #61dafb;
            --modal-completed-background: #d4edda;
            --modal-failed-background: #f8d7da;

        }

        body {
            background-color: var(--background);
            color: var(--text);
            font-family: Arial, sans-serif;
        }

        nav {
            background-color: var(--modal-background-color);
            border: 1px solid var(--modal-border-color);
            border-radius: var(--modal-border-radius);
            padding: 10px;
            display: flex;
            justify-content: flex-end;
            /* Modified: right-align the nav */
            align-items: center;
            margin-bottom: 1vh;
        }

        #cdbLogo {
            height: 5vh;
            margin-right: auto;
        }

        nav ul {
            list-style-type: none;
            margin: 0;
            padding: 0;
            display: flex;
        }

        nav ul li {
            margin-right: 20px;
        }

        nav ul li a {
            color: var(--text);
            text-decoration: none;
            transition: color 0.3s ease;
        }

        nav ul li a:hover {
            color: var(--heading);
        }


        body {
            background-color: var(--background);
            color: var(--text);
            font-family: Arial, sans-serif;
        }

        h1 {
            color: var(--heading)
        }

        #workflowList {
            overflow: scroll;
            height: 90vh;
        }


        #workflowList li {
            background-color: var(--modal-background-color);
            /* padding: 10px; */
            margin-bottom: 10px;
            border: 1px solid #ccc;
            border-radius: 8px;

        }

        #workflowList li.processing {
            background-color: #f8f8f8;
        }

        #workflowList li.completed {
            background-color: var(--modal-completed-background);
        }

        #workflowList li.failed {
            background-color: var(--modal-failed-background);
        }

        #workflowList li a {
            display: block;
            text-decoration: none;
            /* Removes the underline */
            width: 100%;
        }

        #workflowList li a>span {
            color: var(--clickable-text);
            padding: 10px;

        }

        #workflowList li>span {
            color: var(--text);
            padding: 10px;

        }
    </style>
</head>

<body>
    <nav>
        <!-- need to set a proper source URI for this -->
        <img id="cdbLogo" src="/{{ executionApiIngress }}/static/cdbLogo.png" alt="Image">
        <ul>
            <!-- URLs need to be set by the cluster ingress -->
            <li><a href="/{{ executionApiIngress }}/">Workflows</a></li>
            <li><a href="/{{ dataUploadIngress }}/">Data Upload</a></li>
            <li><a href="/{{ sibManagerIngress }}/">Manage Sibs</a></li>
        </ul>
    </nav>

    <div id="workflowList">
        <!-- Workflow modals will be dynamically added here -->
    </div>

    <script>
        // JavaScript code to fetch and display workflow data
        // You can mock the API response for now

        // Mocked workflow data
        /*
        const workflows = [
            { id: 1, name: "Workflow 1", description: "This is workflow 1", status: 'processing' },
            { id: 2, name: "Workflow 2", description: "This is workflow 2", status: 'completed' },
            { id: 3, name: "Workflow 3", description: "This is workflow 3", status: 'failed' },
            { id: 4, name: "Workflow 4", description: "This is workflow 4", status: 'completed' },
            { id: 5, name: "Workflow 5", description: "This is workflow 5", status: 'processing' },
            { id: 6, name: "Workflow 6", description: "This is workflow 6", status: 'completed' },
            { id: 7, name: "Workflow 7", description: "This is workflow 7", status: 'failed' },
            { id: 8, name: "Workflow 8", description: "This is workflow 8", status: 'completed' },
            { id: 9, name: "Workflow 9", description: "This is workflow 9", status: 'processing' },
            { id: 10, name: "Workflow 10", description: "This is workflow 10", status: 'completed' },
            { id: 11, name: "Workflow 11", description: "This is workflow 11", status: 'failed' },
            { id: 12, name: "Workflow 12", description: "This is workflow 12", status: 'completed' },
            { id: 13, name: "Workflow 13", description: "This is workflow 13", status: 'processing' },
            { id: 14, name: "Workflow 14", description: "This is workflow 14", status: 'completed' },
            { id: 15, name: "Workflow 15", description: "This is workflow 15", status: 'failed' },
            { id: 16, name: "Workflow 16", description: "This is workflow 16", status: 'completed' },
            { id: 17, name: "Workflow 17", description: "This is workflow 17", status: 'processing' },
            { id: 18, name: "Workflow 18", description: "This is workflow 18", status: 'completed' },
            { id: 19, name: "Workflow 19", description: "This is workflow 19", status: 'failed' },
            { id: 20, name: "Workflow 20", description: "This is workflow 20", status: 'completed' },
            { id: 21, name: "Workflow 20", description: "This is workflow 21", status: 'completed' },
            { id: 22, name: "Workflow 22", description: "This is workflow 22", status: 'completed' },
            { id: 23, name: "Workflow 23", description: "This is workflow 23", status: 'completed' },
            { id: 24, name: "Workflow 24", description: "This is workflow 24", status: 'completed' },
            { id: 25, name: "Workflow 25", description: "This is workflow 25", status: 'completed' },
            { id: 26, name: "Workflow 26", description: "This is workflow 26", status: 'completed' },
            { id: 27, name: "Workflow 27", description: "This is workflow 27", status: 'completed' },
            { id: 28, name: "Workflow 28", description: "This is workflow 28", status: 'completed' },
            { id: 29, name: "Workflow 29", description: "This is workflow 29", status: 'completed' },
            { id: 30, name: "Workflow 30", description: "This is workflow 30", status: 'completed' },
            { id: 31, name: "Workflow 31", description: "This is workflow 31", status: 'completed' },
            { id: 32, name: "Workflow 32", description: "This is workflow 32", status: 'completed' },

        ];
        */

        // class for Workflows that has id, owner and status
        class WorkflowState {
            constructor(id, owner, status) {
                this.id = id;
                this.owner = owner;
                this.status = status;
            }
        }

        WorkflowState.fromJson = function (json) {
            // Need to figure out the solution for need to parse twice!
            var data = JSON.parse(json); // Parsing the json string.
            return new Workflow(data.id, data.owner, data.status);
        };

        // Function to create and display workflow modals
        function displayWorkflows(workflows) {
            const workflowList = document.getElementById("workflowList");

            workflows.forEach(workflow => {
                const listItem = document.createElement("li");
                listItem.classList.add(workflow.status);
                listItem.id = workflow.id;
                const link = document.createElement("a");
                // set the href to the workflow detail page
                link.href = `/{{ executionApiIngress }}/frontend/${workflow.id}`
                const span = document.createElement("span");
                span.textContent = workflow.id + " - " + workflow.status;
                link.appendChild(span);

                listItem.appendChild(link);


                workflowList.appendChild(listItem);
            });
        }




        function getWorkflows() {
            // Fetch the workflows from the API
            // You can use the fetch API to make a GET request to the API endpoint
            // For now, we will use the mocked data
            const workflows = [];


            apiEndpoint = "{{ getWorkflowsEndpoint }}";

            // Make a GET request to the API endpoint
            fetch(apiEndpoint)
                .then(response => response.json())
                .then(data => {
                    // Parse the JSON response and create WorkflowState objects
                    data.forEach(workflow => {
                        workflows.push(new WorkflowState(workflow.id, workflow.owner, workflow.status));
                    });
                    // Call the function to display the workflows
                    displayWorkflows(workflows);
                })
                .catch(error => {
                    console.error('Error:', error);
                });

            return workflows;

        }

        // Call the function to display workflows
        //displayWorkflows();
        getWorkflows();
    </script>
</body>

</html>