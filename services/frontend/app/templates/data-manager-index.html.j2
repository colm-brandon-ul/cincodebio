<html>
<head>
    <title>Upload Files</title>
    {% include 'cdb_css_link.html.j2' with context %}
    <style>
        
        
        /* Style for the loading modal */
        .loading-modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.5);
            z-index: 9999;
            justify-content: center;
            align-items: center;
        }

        .loading-modal .loading-spinner {
            border: 16px solid #f3f3f3;
            border-top: 16px solid #3498db;
            border-radius: 50%;
            width: 120px;
            height: 120px;
            animation: spin 2s linear infinite;
        }

        @keyframes spin {
            0% {
                transform: rotate(0deg);
            }

            100% {
                transform: rotate(360deg);
            }
        }

        /* Modern UI styling for the upload form */
        #uploadForm {
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            /* Added to center align vertically */
            gap: 1rem;
            max-width: 400px;
            margin: 0 auto;
            padding: 2rem;
            border: 1px solid var(--modal-border-color);
            border-radius: var(--modal-border-radius);
            background-color: var(--modal-background-color);
        }

        #uploadForm input[type="text"],
        #uploadForm input[type="file"],
        #uploadForm select {
            padding: 0.5rem;
            border: 1px solid #ccc;
            border-radius: 4px;
            font-size: 1rem;
        }

        #uploadForm button[type="submit"] {
            padding: 0.5rem 1rem;
            border: none;
            border-radius: 4px;
            background-color: var(--submit-button-color);
            color: #fff;
            font-size: 1rem;
            cursor: pointer;
        }

        #uploadForm button[type="submit"]:hover {
            background-color: var(--submit-button-color-hover);
        }

        #uploadForm label {
            display: block;
            font-size: 1rem;
            font-weight: bold;
            margin-bottom: 0.5rem;
        }
    </style>
</head>

<body>
    {% include 'navbar.html.j2' with context %}
     <!-- TO DO -->
    <!-- This needs to be dynamically populated from the ontology -->
    <!-- Experiment Type is the SubClasses of Experiment -->
    <!-- The remainder of the form is dynamic and based on the files associated with the Experiment SubClass in the ontology-->
    <div>
        <form id="uploadForm" action="/upload" method="post" enctype="multipart/form-data">
            <label for="fileTypeSelect">Experimental Data Type:</label>
            <select id="fileTypeSelect" name="fileTypeSelect" onchange="" required>
            </select>

            <label for="id">Experiment ID:</label>
            <!-- Need to do some form validation on input (needs to a valid prefix for Minio/filepath) -->
            <input type="text" id="id" name="id" required placeholder="Enter experiment ID">
            <div id="fileInputsContainer">
                <!-- Dynamic file inputs will be generated here -->
            </div>
            <button type="submit">Upload</button>
        </form>
    </div>
    <!-- Loading modal -->
    <div class="loading-modal" id="loadingModal">
        <div class="loading-spinner"></div>
    </div>
    <script>

        function onSelect(){
            console.log('Hello World')
        }

        document.getElementById("fileTypeSelect").addEventListener("change", function () {
            var selectedOption = this.value;
            console.log("You selected: ", selectedOption);
            // You can add more code here to perform actions based on the selected option
        });

        

        document.getElementById('uploadForm').addEventListener('submit', function (event) {
            event.preventDefault(); // Prevent the form from submitting normally
            console.log(event)
            let fetchPromises = [];
            // Show the loading modal
            document.getElementById('loadingModal').style.display = 'flex';

            var fileInput = document.getElementById('uploadForm');
            console.log(fileInput.fileTypeSelect.value);

            var fileInputs = document.querySelectorAll('input[type="file"]');
            
            console.log(fileInputs[1].name);

            let fetchP = fetch('{{ data_manager_address }}check-prefix?prefix=' + fileInput.id.value)
                .then(response => response.json())
                .then(data => {
                    if (data) {
                        fileInputs.forEach(function (input,index) {
                            var file = input.files[0];
                            console.log(input);
                            console.log(file);
                            // Perform actions with the file here
                            let fetchp2 = fetch('{{ data_manager_address }}get-presigned-upload-url?prefix=' + fileInput.id.value + '&object_name=' + file.name + '&content_type=' + file.type)
                                .then(response => response.json())
                                .then(data => {
                                    if (file) {

                                        let fetchp3 = fetch(data, {
                                            method: 'PUT',
                                            body: file,
                                        })
                                            .then(response => response)
                                            .then(data => {
                                                console.log(data);
                                                let fetchp4 = fetch('{{ data_manager_address }}add-tags?prefix=' + fileInput.id.value + '&object_name=' + file.name + '&content_type=' + file.type + '&experimental_tag=' + fileInput.fileTypeSelect.value + '&file_tag=' + input.name)
                                                    .then(response => response.json())
                                                    .then(data => {
                                                        //console.log("Files uploaded successfully!");

                                                        if (index === fileInputs.length - 1) {
                                                            Promise.all(fetchPromises)
                                                            .then(() => {
                                                                console.log("All files uploaded successfully!");
                                                                
                                                                document.getElementById("uploadForm").reset();
                                                                // Hide the loading modal after a delay (you can adjust the delay as needed)
                                                                setTimeout(function () {
                                                                            document.getElementById('loadingModal').style.display = 'none';
                                                                        }, 100);
                                                                alert("Files uploaded successfully!");
                                                            })
                                                            .catch(error => console.error(error));
                                                           
                                                        }
                                                    })
                                                    .catch(error => console.error(error));

                                                fetchPromises.push(fetchp4);
                                            })
                                            .catch(error => console.error(error));

                                    fetchPromises.push(fetchp3);
                                    }
                                })
                                .catch(error => console.error(error));
                                fetchPromises.push(fetchp2);
                        });

                    }
                    else {
                        alert("The id already exists. Please enter a new id.");
                    }
                })
                .catch(error => console.error(error));


            fetchPromises.push(fetchP);
        });

        // get the file type config from the server
        const FILE_TYPE_CONFIG = fetch('/app/get-form-details', {
            method: 'GET',
            headers: {
                'Content-Type': 'application/json'
            }
        })
            .then(response => response.json())
            .then(data => {
                console.log(data);
                return data;
            })
            .catch(error => console.error(error));


        // JSON configuration object (as provided earlier)

        class DynamicFileUploadManager {
            constructor(fileTypeConfig) {
                this.fileTypeConfig = fileTypeConfig;
                this.fileTypeSelect = document.getElementById('fileTypeSelect');
                this.formContainer = document.getElementById('fileInputsContainer');

                this.init();
            }

            init() {

                // Populate select options
                this.populateSelectOptions();

                // Initial setup of event listeners
                this.fileTypeSelect.addEventListener('change', () => this.updateFileInputs());
                
                // Trigger initial configuration
                this.updateFileInputs();
            }

            populateSelectOptions() {
                // Clear existing options
                this.fileTypeSelect.innerHTML = '';

                // Populate options from config keys
                Object.keys(this.fileTypeConfig).forEach(fileType => {
                    const option = document.createElement('option');
                    option.value = fileType;
                    option.textContent = fileType;
                    this.fileTypeSelect.appendChild(option);
                });

                // Set first option as default if exists
                if (this.fileTypeSelect.options.length > 0) {
                    this.fileTypeSelect.selectedIndex = 0;
                }
            }

            

            updateFileInputs() {
                const selectedType = this.fileTypeSelect.value;
                const typeConfig = this.fileTypeConfig[selectedType];

                // Clear existing inputs
                this.formContainer.innerHTML = '';

                // Generate new inputs based on configuration
                typeConfig.forEach(config => {
                    this.createFileInput(config);
                });
            }

            createFileInput(config) {
                // Create wrapper div
                const inputWrapper = document.createElement('div');
                inputWrapper.classList.add('file-input-wrapper');

                // Create label
                const label = document.createElement('label');
                label.textContent = this.capitalizeFirstLetter(config.name.replace(/_/g, ' ')) + ': ';
                label.setAttribute('for', config.name);

                // Create file input
                const input = document.createElement('input');
                input.type = 'file';
                input.id = config.name;
                input.name = config.name;
                input.required = true;

                // Set accept attribute based on allowed extensions
                const acceptExtensions = config.files
                    .map(fileType => fileType.file_extensions)
                    .flat()
                    .join(',');
                input.accept = acceptExtensions;

                // Add validation
                input.addEventListener('change', (event) => this.validateFileInput(event.target, config.files));

                // Append label and input to wrapper
                inputWrapper.appendChild(label);
                inputWrapper.appendChild(input);

                // Add wrapper to form container
                this.formContainer.appendChild(inputWrapper);
            }

            validateFileInput(inputElement, allowedConfigs) {
                const file = inputElement.files[0];
                if (!file) return;

                const fileName = file.name.toLowerCase();
                const isValidFile = allowedConfigs.some(config => 
                    config.file_extensions.some(ext => fileName.endsWith(ext))
                );

                if (!isValidFile) {
                    alert(`Invalid file type for ${inputElement.name}. Allowed extensions: ${
                        allowedConfigs
                            .map(config => config.file_extensions)
                            .flat()
                            .join(', ')
                    }`);
                    inputElement.value = ''; // Clear the invalid file selection
                }
            }

            capitalizeFirstLetter(string) {
                return string.charAt(0).toUpperCase() + string.slice(1);
            }
        }

        // Initialize the dynamic file upload manager when the DOM is loaded
        document.addEventListener('DOMContentLoaded', () => {
            new DynamicFileUploadManager(FILE_TYPE_CONFIG);
        });


        
    </script>
</body>

</html>