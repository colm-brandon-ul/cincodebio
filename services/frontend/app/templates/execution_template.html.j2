{# Template for providing updates of the workflow execution steps #}
<html>

<head>
    {% include 'cdb_css_link.html.j2' with context %}
    <style>
        #wf-status {
            color: var(--text);
            background-color: var(--object-color);
            padding: 10px;
            margin-bottom: 10px;
            border-radius: 5px;
        }


        .button:hover {
            background-color: #282c34;
        }

        .link {
            color: #61dafb;
            text-decoration: none;
        }

        a {
            color: var(--clickable-text);
            text-decoration: none;

        }

        .link:hover {
            text-decoration: underline;
        }



        #wf-state-container li {
            background-color: var(--modal-background-color);
            /* padding: 10px; */
            margin-bottom: 10px;
            border: 1px solid #ccc;
            border-radius: 8px;

        }

        #wf-state-container li.has-link {
            background-color: #007BFF;
            /* Adjust this color to your liking */
        }

        #wf-state-container li.job-completed {
            background-color: var(--modal-completed-background);
        }

        #wf-state-container li.has-link:hover {
            background-color: var(--submit-button-color-hover);
        }

        #wf-state-container li a {
            display: block;
            color: #ffffff;
            width: 100%;
        }

        #wf-state-container li a>span {
            color: #ffffff;
            padding: 10px;

        }

        #wf-state-container li>span {
            color: var(--text);
            padding: 10px;

        }
    </style>
    <script>

        // Declaration
        class Workflow {
            constructor(id, owner, status, state) {
                this.id = id;
                this.owner = owner;
                this.status = status;
                this.state = state;
            }
        }


        Workflow.fromJson = function (json) {
            // Need to figure out the solution for need to parse twice!
            var data = JSON.parse(JSON.parse(json)); // Parsing the json string.
            return new Workflow(data.id, data.owner, data.status, data.state);
        };

        var wf_state;

        var ws = new WebSocket('{{ws_address}}');
        // Send Echo to client every second to keep connection open

        function sendEcho() {
            // return new date and time
            let dateTime = new Date();
            // return the time
            let time = dateTime.toLocaleTimeString();
            console.log(time)
            ws.send('echo')
        }

        function deleteAllChildren(node) {
            while (node.firstChild) {
                node.removeChild(node.firstChild);
            }
        }

        ws.onmessage = function (event) {
            var message = document.createElement('li')
            // var content = document.createTextNode(event.data)

            if (typeof wf_state !== 'undefined') {
                // the variable is defined
                new_wf_state = Workflow.fromJson(event.data)

                // has the workflow status changed?
                if (wf_state.status !== new_wf_state.status) {
                    // Update Workflow State Display and update existing object

                    wf_existing_text_node = document.getElementById('wf-status')


                    // delete all children of the existing text node
                    deleteAllChildren(wf_existing_text_node)

                    // replace the existing text node with the new node
                    // create a text node with the workflow status
                    if (wf_state.status == 'completed') {
                        // create a clickable hyperlink (to download the results as zip file)
                        var new_node = document.createElement('a')
                        var new_node_text = document.createTextNode(`Workflow; ${wf_state.id} is ${wf_state.status}`);
                        new_node.appendChild(new_node_text)
                        new_node.addEventListener('click', function () {
                            downloadWorkflowZip(wf_state.id)
                        })
                    }
                    else {
                        var new_node = document.createTextNode(`Workflow; ${wf_state.id} is ${wf_state.status}`);
                    }

                    wf_existing_text_node.appendChild(newNode)

                    wf_state.status = new_wf_state.status

                }

                // Check Job State
                old_state_length = wf_state.state.length
                new_wf_state.state.forEach(function (item, index) {
                    if (index >= old_state_length) {
                        // A job state has been added
                        var message = document.createElement('li')
                        message.setAttribute("id", item.id);
                        console.log(item.job_status == 'awaiting_interaction')
                        var content
                        // if the job status is awaiting_interaction, create a clickable hyperlink (to redirect to the service's frontend)
                        if (item.job_status == 'awaiting_interaction') {
                            // creates a clickable hyperlink and puts the job_status as the text inside a span
                            content = document.createElement('a')
                            content.setAttribute("href", item.url)
                            content_text = document.createTextNode(`${item.service_name} - ${item.job_status}`);
                            content.appendChild(content_text)

                        }
                        // if the job status is completed, create a clickable hyperlink (to download the results as zip file)
                        else if (item.job_status == 'completed') {
                            // creates a clickable hyperlink and puts the job_status as the text inside a span
                            content = document.createElement('a')
                            content_text = document.createTextNode(`${item.service_name} - ${item.job_status}`);
                            content.appendChild(content_text)
                            content.addEventListener('click', function () {
                                downloadJobZip(item.id)
                            })
                        }
                        else {
                            // creates a span with the job_status as the text
                            content = document.createTextNode(`${item.service_name} - ${item.job_status}`)
                        }

                        message.appendChild(content)
                        document.getElementById('wf-state-container').appendChild(message)
                    }
                    else {
                        // A job state may have been updated
                        if (item.job_status != wf_state.state[index].job_status) {
                            // A job state has been updated

                            // get the existing text node
                            existing_text_node = document.getElementById(item.id)

                            // create a new node
                            let newNode;
                            // if the job status is awaiting_interaction, create a clickable hyperlink (to redirect to the service's frontend)
                            if (item.job_status == 'awaiting_interaction') {
                                newNode = document.createElement('a')
                                newNode.setAttribute("href", item.url)
                                content_text = document.createTextNode(`${item.service_name} - ${item.job_status}`);
                                newNode.appendChild(content_text)
                                // Add a class to the li element
                                existing_text_node.classList.add('has-link');

                            }
                            // if the job status is completed, create a clickable hyperlink (to download the results as zip file)
                            else if (item.job_status == 'completed') {
                                newNode = document.createElement('a')
                                content_text = document.createTextNode(`${item.service_name} - ${item.job_status}`);
                                newNode.appendChild(content_text)
                                newNode.addEventListener('click', function () {
                                    downloadJobZip(item.id)
                                })

                                existing_text_node.classList.remove('has-link');
                                existing_text_node.classList.add('job-completed');
                            }
                            else {

                                newNode = document.createTextNode(`${item.service_name} - ${item.job_status}`);
                                // remove class from the li element
                                existing_text_node.classList.remove('has-link');
                            }

                            // replace the existing text node with the new node
                            existing_text_node.replaceChild(newNode, existing_text_node.childNodes[0]);
                        }
                    }
                    // console.log(item, index);
                });
                // Update the state of the workflow
                wf_state.state = new_wf_state.state
            }
            // the variable is undefined - therefore needs to be initialised
            else {
                wf_state = Workflow.fromJson(event.data)

                // create a text node with the workflow status
                if (wf_state.status == 'completed') {
                    // create a clickable hyperlink (to download the results as zip file)
                    var wf_content = document.createElement('a')
                    var wf_content_text = document.createTextNode(`Workflow; ${wf_state.id} is ${wf_state.status}`);
                    wf_content.appendChild(wf_content_text)
                    wf_content.addEventListener('click', function () {
                        downloadWorkflowZip(wf_state.id)
                    })
                }
                else {
                    var wf_content = document.createTextNode(`Workflow; ${wf_state.id} is ${wf_state.status}`);
                }

                document.getElementById('wf-status').appendChild(wf_content)

                wf_state.state.forEach(function (item, index) {
                    var message = document.createElement('li')
                    message.setAttribute("id", item.id);
                    var content;
                    // if the job status is awaiting_interaction, create a clickable hyperlink (to redirect to the service's frontend)
                    if (item.job_status == 'awaiting_interaction') {
                        // creates a hyperlink and puts the job_status as the text inside a span
                        content = document.createElement('a');
                        var link = document.createElement('span');
                        content.setAttribute("href", item.url);
                        var content_text = document.createTextNode(`${item.service_name} - ${item.job_status}`);
                        link.appendChild(content_text);
                        content.appendChild(link)
                        // Add a class to the li element
                        message.classList.add('has-link');

                    }
                    // if the job status is completed, create a clickable hyperlink (to download the results as zip file)
                    else if (item.job_status == 'completed') {
                        // creates a hyperlink and puts the job_status as the text inside a span
                        content = document.createElement('a');
                        var link = document.createElement('span');
                        var content_text = document.createTextNode(`${item.service_name} - ${item.job_status}`);
                        link.appendChild(content_text);
                        content.appendChild(link);
                        content.addEventListener('click', function () {
                            downloadJobZip(item.id)
                        });
                        content.classList.add('job-completed');
                    }

                    else {
                        content = document.createElement('span');
                        var content_text = document.createTextNode(`${item.service_name} - ${item.job_status}`);
                        content.appendChild(content_text);
                    }

                    // append the content to the message
                    message.appendChild(content)
                    // append the message to the wf-state-container
                    document.getElementById('wf-state-container').appendChild(message)
                });



            }

        };

        // download zip file(s)
        function downloadJobZip(job_id) {
            // makes a request to the data-manager's endpoint to get the job data as a zip file
            var apiEndpoint = `{{ data_manager_address }}get-job-data-as-zip/${job_id}`;

            // Create a new anchor element
            var link = document.createElement('a');
            // set the href attribute to the apiEndpoint
            link.href = apiEndpoint;
            // set the download attribute to the ${job_id}.zip
            link.download = `${job_id}.zip`;

            // Trigger the click event on the anchor element
            link.click();
        }

        function downloadWorkflowZip(workflow_id) {
            // makes a request to the data-manager's endpoint to get the workflow data as a zip file
            var apiEndpoint = `{{ data_manager_address }}get-workflow-data-as-zip/${workflow_id}`;

            // Create a new anchor element
            var link = document.createElement('a');
            // set the href attribute to the apiEndpoint
            link.href = apiEndpoint;
            // set the download attribute to the ${workflow_id}.zip
            link.download = `${workflow_id}.zip`;

            // Trigger the click event on the anchor element
            link.click();
        }




        // Send Echo every second for Websocket to stay open
        setInterval(sendEcho, 1000)
    </script>
    <title>
        CellMaps Execution Frontend
    </title>
</head>

<body>
    {% include 'navbar.html.j2' with context %}

    <div id="wf-status">

    </div>
    <ol id="wf-state-container">

    </ol>
</body>


</html>